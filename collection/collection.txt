<OPENCV>
	<Mat,初始化>
		Mat msrc(32, 32, CV_8UC3, Scalar(0, 0, 0));	//32x32，8位无符号，3通道彩色图像，像素初始化为BGR(0,0,0)
		预定义类型的结构:
		关于预定义类型的说明
			CV_<bit_depth>(S|U|F)C<number_of_channels>
			其中,
			(1) bit_depth---比特数---代表8bite\16bite\32bite\64bite
			eg：8表示你所创建的储存图片的Mat对象中，每个像素点在内存空间所占的空间大小8bite。
			(2) S|U|F
			S: signed int，即有符号整型；
			U: unsigned int，即无符号整型；
			F: float，单精度浮点型。
			(3) C<number_of_channels>：所存储的图片的通道数。
			eg 1---grayImg灰度图像---是---单通道图像
			2---RGB彩色图像---是---3通道图像
			3---带Alpha通道的RGB彩色图像---是---4通道图像
		</Mat,初始化>
	<pixel,像素表示，颜色表示>
	CvScalar是一个可以用来存放4个double数值的数组；一般用来存放像素值（不一定是灰度值哦）的，最多可以存放4个通道的。
	typedef struct CvScalar
	{
		double val[4];
	}CvScalar;
	a) 存放单通道图像中像素：cvScalar(255);
	b) 存放三通道图像中像素：cvScalar(255,255,255);
	c)//只使用第一个通道，val[0]=val0;等同于cvScalar（val0,0,0,0）;
	 inline CvScalar cvRealScalar( double val0 );
	d)//所用通道值用同一个val0123赋值
	 inline CvScalar cvScalarAll( double val0123 );
	e)CV_RGB是OpenCV中的一个宏，用于创建一个色彩值：
	 #define CV_RGB(r,g,b)  cvScalar((b),(g),(r),0)。
	 看到转换为cvScalar时，rgb的顺序变为bgr，这是因为opencv中存储RGB模式彩图时，采用的通道顺序是BGR.
	 举例：CvScalar color = CV_RGB( rand()&255, rand()&255, rand()&255 )
	</pixel,像素表示，颜色表示>
	<at,对单个像素访问和操作>
	1.at操作(简单但效率较低)
	对于灰度图读取和修改操作如下：
		uchar pixel_value = Mat.at<uchar>(row, col);
		Mat.at<uchar>(row, col) = pixel_value; 
	对于RGB彩色图像而言：
		Vec3b color_value = Mat.at<Vec3b>(row, col);
		Mat.at<Vec3b>(row, col) = color_value;
	2.ptr操作
	ptr操作时通过指针偏移的方式进行像素的查找、遍历和修改的，因此效率相对较高。
	对于灰度图的读取和修改操作如下：
		uchar pixel_value = Mat.ptr<uchar>(row)[col];
		Mat.ptr<uchar>(row)[col] = pixel_value; 
	对于RGB彩色图像而言：
		Vec3b color_value = Mat.ptr<Vec3b>(row)[col];
		Mat.ptr<Vec3b>(row)[col] = color_value;
	</at,对单个像素访问和操作>
</OPENCV>
<C/C++>
	<include,常用头文件>
	#include <algorithm>  //可以用sort函数
	</include,常用头文件>
	<file, 文件读写, 序列化>
	//{以二进制方式将opencv二进制文件写入dat文件, 然后再重新读取出来恢复
	int serialize(Mat src, char* filename)
	{
		int nTmp = 0;
		uchar cTmp = 0;
		Vec3b vecTmp = Vec3b(0, 0, 0);
		if (-1 == remove(filename));
		ofstream ofs(filename, ios::out | ios::binary);//打开record.txt文件，以ios::app追加的方式输入
		if (!ofs)
		{
			cout << "打开文件失败" << endl;
		}
		else
		{
			nTmp = src.rows;
			ofs.write((char*)&nTmp, sizeof(int));
			nTmp = src.cols;
			ofs.write((char*)&nTmp, sizeof(int));
			ofs.write((char*)src.data, sizeof(Vec3b)*src.rows*src.cols);
		}
		ofs.close();//关闭文件
		return 0;
	}
	int deserialize(Mat& dst, char* filename)
	{
		int nTmp = 0;
		uchar cTmp = 0;
		Vec3b vecTmp = Vec3b(0, 0, 0);
		ifstream ifs(filename, ios::in|ios::binary);
		if (!ifs)
		{
			cout << "打开文件失败" << endl;
		}
		else
		{
			ifs.read((char*)&nTmp, sizeof(int));
			dst.rows = nTmp;
			ifs.read((char*)&nTmp, sizeof(int));
			dst.cols = nTmp;
			ifs.read((char*)dst.data, sizeof(Vec3b)*dst.rows*dst.cols);
			//ifs >> vecTmp[2];
			//dst.ptr<Vec3b>(i)[j] = vecTmp;
		}
		ifs.close();//关闭文件
		return 0;
	}
	//}以二进制
	
	一、打开文件
	　　在fstream类中，有一个成员函数open()，就是用来打开文件的，其原型是：
	　　void open(const char* filename,int mode,int access);
	参数：
	　　filename：　　要打开的文件名
	　　mode：　　　　要打开文件的方式
	　　access：　　　打开文件的属性

	　　打开文件的方式在类ios(是所有流式I/O类的基类)中定义.
	常用的值如下：
	　　ios::app：　　　以追加的方式打开文件
	　　ios::ate：　　　文件打开后定位到文件尾，ios:app就包含有此属性
	　　ios::binary：　以二进制方式打开文件，缺省的方式是文本方式。两种方式的区别见前文
	　　ios::in：　　　 文件以输入方式打开(文件数据输入到内存)
	　　ios::out：　　　文件以输出方式打开(内存数据输出到文件)
	　　ios::nocreate： 不建立文件，所以文件不存在时打开失败
	　　ios::noreplace：不覆盖文件，所以打开文件时如果文件存在失败
	　　ios::trunc：　　如果文件存在，把文件长度设为0
	　　可以用“或”把以上属性连接起来，如ios::out|ios::binary

	　　打开文件的属性取值是：
	　　0：普通文件，打开访问
	　　1：只读文件
	　　2：隐含文件
	　　4：系统文件

	　　可以用“或”或者“+”把以上属性连接起来，如3或1|2就是以只读和隐含属性打开文件。

	　　例如：以二进制输入方式打开文件c:\config.sys
	　　fstream file1;
	　　file1.open("c:\\config.sys",ios::binary|ios::in,0);

	    特别提出的是，fstream有两个子类：
		ifstream(input file stream)和ofstream(outpu file stream)，
	    ifstream默认以输入方式打开文件
	    ofstream默认以输出方式打开文件
	</file,读写文件,序列化>
	<overload, 重载运算符>
	void operator=(const Distance &D )
      { 
         feet = D.feet;
         inches = D.inches;
      }
	</overload,重载运算符>
	<stack overflow,栈溢出>
		以vs2017为例，windows栈大小默认为1M，超过1M就会报错提示栈溢出:stack overflow
		举例：
			1.新建windows console程序，在main函数里只定义一个字符数组 
			char maxStack[1024][1024];
			2.编译正常
			3.链接运行，报错:exception unhandled, stack overflow parameter xxxxx
			(实际上char maxStack[1024][1005]，可以正常运行)
		栈溢出解决方案：
			方案1.调整栈内变量内存分配，限制在1M内
			方案2.调整程序栈大小，以vs为例，右键工程，转到properties->Linker->System->Stack Reserve Size，输入栈大小(以byte为单位)，比如16M，输入16777216即可
	</stack>
	<C/C++,linux>
	1.g++编译
		g++ -c file.cpp 
		-c 是compile的意思，生成file.o文件 
	2.g++链接 
		g++ file1.o file2.o -o program.exe 
		-o 是指定生成的可执行文件名称，若不给出，默认名称为a.out 
	3.编译+链接
		g++ file1.cpp file2.cpp -o program.exe 
		这等同于上面的两步结合
	4.运行时需要给路径名称：如./a.out, 直接输入a.out不能运行


	</C>
	<linkerror>
		查看lib文件包含
	</linkerror>	
	<commonfunc,常用方法>
	判断数据运算溢出导致结果 is not a number 
	bool isnan();

	</commonfunc,常用方法>	
</C/C++>

<linux,ubuntu>
	<command,查看显卡型号>
	lspci | grep -i nvidia
	sudo dpkg --list | grep nvidia-*
	</command,查看显卡型号>
	<tgz,压缩和解压文件>
	1 将tgz文件解压到指定目录
	tar   zxvf    test.tgz  -C  指定目录
	比如：tar  zxvf  /source/kernel.tgz  -C /source/ linux-2.6.29
	2 将指定目录压缩到指定文件
	tar czvf   kernel.tgz   linux-2.6.29
	</tgz,解压文件>
</linux,ubuntu>

<git,github>
	<error,报错>
	git pull报错：	refusing to merge unrelated histories
	</error,报错>
	<ssh,创建秘钥>
	instruction:ssh-keygen -t rsa -C 924925465@qq.com
	秘钥路径：C:\Users\Administrator\.ssh
	</ssh,创建秘钥>
	<git,windows下Git基本操作>
		返回上一级目录：cd ..
		查看当前目录：pwd
		创建文件：vi readme.txt(i:编辑模式，esc：命令模式；命令模式下q:退出编辑，q!：强制退出编辑，x:退出编辑并保存)
	</git,windows下Git基本操作>
	<git,删除本地仓库>
		先rm -rf xxx.git 
		再rm -rf xxx
	</git,删除本地仓库>
	</git,删除本地仓库>
</git,github>

<math>
	<symbol,数学符号>
	λμνσξθηεδαβσρφχψωτ
	£¥±ΦΨΩΓΔΛ∞
	</symbol,拉丁字符>
	<math,truncated normal distribution>
	normal distribution 是正太分布，truncated normal distribution成为截断正太分布，样本取值有上下限
	</math,truncated>
	<math,向量方差,协方差矩阵>
	随机向量对应随机变量方差的数字特征应是协方差阵：D(X)=E{[X-E(X)][X-E(X)]'}
	其中E(X)为向量均值等于向量每个分量的均值,X-E(X)就是分量减去各自分量的均值,[X-E(X)]'表示转置即行向量.对角线上元素对应的是每个分量的方差,如果各个分量独立的话,D(X)是对角阵.你说的向量的方差应就是它.
	</math,向量方差>
	<math,softmax函数>
	归一化指数函数，是逻辑函数的一种推广。Softmax函数实际上是有限项离散概率分布的梯度对数归一化
	它能将一个含任意实数的K维向量  “压缩”到另一个K维实向量  中，使得每一个元素的范围都在  之间，并且所有元素的和为1。
	</math,softmax函数>
	<math,one-hot vector>
	类似一组指示灯，一次只能亮一个，即向量里面只有一个元素为1，其余为0
	</math,softmax函数>
</math>

<key:anaconda,指令>
	<normal instuction>
		conda list			#列出已安装包
		conda upgrade --all  #更新所有包
		conda install package_name #安装指定包
		conda install pandas numpy 	#install simultaneously
		conda isntall numpy=1.10 	#install specified version
		conda remove package_name		#uninstall package
		conda upgrade package_name		#upgrade
		conda update package_name/--all	#update specified package
		conda search term				#fuzzy search without specific name
		ubuntu16.04启动Anaconda Navigator 图形化界面：anaconda-navigator
		conda update -n base -c defaults conda #更新anaconda版本
	</normal>
	<environment>
		<create env>
			conda create -n env_name package_names	#eg:conda create -n py3 pandas,then you get 										#a dir named py3 with pandas intalled in it
											#more: conda create -n py3 python=3
											#conda create -n py2 python=2
			conda create -n BBB --clone  	#克隆环境
									
			conda info --envs		//列出环境
		</create>
		<active env>
			activate my_env							#activate specific environment
			conda list								#list packages under the env
			conda install package_name 				#install specific package under  									     #the env
		</active>
		<leave env>
			deactivate
		</leave>
	</environment>
	<tensorflow install>
		pip install --ignore-installed --upgrade https://storage.googleapis.com/tensorflow/windows/gpu/tensorflow_gpu-1.0.1-cp35-cp35m-win_amd64.whl
		Tsinghua mirror: pip install --ignore-installed --upgrade https://mirrors.tuna.tsinghua.edu.cn/tensorflow/windows/gpu/tensorflow_gpu-1.0.1-cp35-cp35m-win_amd64.whl
		Tsinghua mirror: conda install https://mirrors.tuna.tsinghua.edu.cn/tensorflow/windows/gpu/tensorflow_gpu-1.0.1-cp35-cp35m-win_amd64.whl
		//使用清华镜像安装TensorFlow
			pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow-gpu
			pip install -i https://pypi.tuna.tsinghua.edu.cn/simple tensorflow
		<note,tensorflow,mnist>
		ReLU:一种神经元激活函数，称为线性整流函数，可表示为y=max(0,x)
		</note>
		<tensorflow,reduce_mean>
			tf.reduce_mean(x)		#所有元素求均值
			tf.reduce_mean(x,0)		#压缩行，按列求均值
			tf.reduce_mean(x,1)		#压缩列，按行求均值
		</tensorflow,reduce_mean>
	</tensorflow>

</key:anaconda,指令>

<python>
	<python_pandas>
		<pandas, 读数据>
		直接读字典对象
		读CSV
		读数据库(内置sqlite)
		</pandas,读数据>
		<operation,基本操作>
		# -*- coding: utf-8 -*-
		
		data = pandas.read_csv('test.csv')	#读csv文件
		first_rows = data.head(n=5)	#返回前n行
		cols = data.columns 		#返回全部列名
		dimensision = data.shape 	#返回维度
		# print data.values 		#返回所有数据 numpy格式
		# print data.dtypes 		#返回每一列数据类型
		# print data.loc[1] 		#返回指定行数据
		# print data.loc[:,['disease']] #返回制定行制定类数据
		df.dropna(how = 'any') 		#去掉有缺失值的行
		df.fillna(values = 'null') 	#对缺失值进行填充
		</operation,基本操作>
		<error,读CSV报错>
		错误：Unable to open parsers.pys:File not found
		原因：csv文件路径含有中文或者csv内容里面有中文字符，
		解决方案1：中文字符全部改为英文字符即可
		解决方案1：
			Python2里面：
			# -*- coding: utf-8 -*-			#此句写在py文件第一行
			mydata = pd.read_csv(u"例子.csv")   #前面加u，第一行的编码必须utf-8
			python3里面：
			# -*- coding: utf-8 -*-			#此句写在py文件第一行
			mydata = pd.read_csv(u"例子.csv",encoding = "gbk")
			mydata = pd.read_csv(u"例子.csv",encoding = "gb2312")  
			mydata = pd.read_csv(u"例子.csv",encoding = "gb18030")
		</error,读CSV报错>
	</python_pandas>
	<list, 列表>
	#创建列表
	>>>lst = [] #创建空列表
	>>>lst = [1, 2, "ASDF"]	#非空列表
	>>>lst = range(1, 11)		#快速创建列表, 元素为1到10的数字
	>>>lst = [x*x for x in range(1, 11) if x%2 == 0]	#列表生成式
	[4, 16, 36, 64, 100]
	</list,列表>
	<numpy>
		tolist			将numpy数组转换为Python列表的函数
		copy			复制numpy数组元素的函数
		ones，zeros		创建用1或0填充的数组的函数
		zeros_like,ones_like	该函数用来创建与作为参数的列表形状相同的二维数组
		fill			将数组元素替换为某一特定元素的函数
		identity		创建单位矩阵的函数
		eye				该函数用来创建第K条对角线上元素为1的对角矩阵
		vstack,hstack	将数组合并为二维数组的函数
		"random子模块：random、permutation，normal，rand、multivariate_normal等"   从某种分布抽取元素，创建数组
		#数组连接/拼接操作
			arr1= np.array([[11,12],[32,42]], float)
			arr2= np.array([[54,26],[27,28]], float)
			arr = np.concatenate((arr1, arr2)) #默认按第一维度连接
			arr = np.concatenate((arr1, arr2), axis=0)
			arr = np.concatenate((arr1, arr2), axis=1) #按第二维度进行连接
		#对数组各维度进行切片操作
		matrix[0:1,1:2] #
		matrix[1,:] #只有:表本维度所有
		matrix[:,2]
		matrix[-1:, -2:] #-2表从本维度倒数第二个元素开始往后数
		'''矩阵运算begin'''
			B = A*C  #矩阵对应元素相乘,要求A C同型
			B = np.multiply(A, C) # 同A*C
			B = np.dot(A, C)	#矩阵乘法, 要求A的列数等于C的行数
			B = A.I  #矩阵求逆
		'''矩阵运算end'''
	</numpy>
	<python, 文件操作>
		文件移动剪切
		import os,shutil
		shutil.move(src,dst)
	</python,文件操作>
	<python, 字符串操作>
		#字符串和整数，浮点型互相转换
		int(str)	#字符串转整型 
		float(str)	#字符串转浮点数 
		str(num)	#数字转字符串 
		字符串两端去空格或指定字符
		str.strip()
		str.lstrip()
		str.rstrip("/")
		<batch,批处理指令>
			批处理,删除文件夹和文件
			RD/S/Q dir1,dir2,dir3
		</batch,批处理指令>

		日期格式与字符串互转
		1.先导入库：import datetime
		2.获取当前日期和时间：now_time = datetime.datetime.now()
		3.格式化成我们想要的日期：strftime（）
		比如：“2016-09-21”：datetime.datetime.now().strftime('%Y-%m-%d')
	</python,字符串操作>
	<datatype,dictionary>
		创建字典：	d={key1:value1,key2:value2}
		列出字典的key： dict.keys()
		访问字典：    value = dict['key'], value = dict.get(key)
	</datatype,dictionary>
	<python,同时安装python2和python3>
		[key:python,同时按照Python2和python3时PIP的使用]
		假如安装完之后pip2能用，pip3不能用，
		则在cmd输入以下指令(前提是已经修改为python3.exe)
		python3 -m pip install --upgrade pip --force-reinstall
		之后用pip -V 查看是否安装成功
	</python,同时安装python2和python3>
	<python,tensorflow,accuracy.eval>
	eval() 其实就是tf.Tensor的Session.run() 的另外一种写法。你上面些的那个代码例子，如果稍微修改一下，加上一个Session context manager：
	with tf.Session() as sess:
 	 print(accuracy.eval({x:mnist.test.images,y_: mnist.test.labels}))
  	with tf.Session() as sess:
 	 print(sess.run(accuracy, {x:mnist.test.images,y_: mnist.test.labels}))
	</python,tensorflow,accuracy.eval>
	<python,mumpy,initialize,初始化>
	np.zeros(10,dtype=int)			#创建一个长度为10的数组，初值为0
	np.ones((3,5),dtype=float)		#创建一个3X5的浮点型数组，初值为1
	np.full((3,5),3,14)				#创建一个3X5的浮点型数组，初值为3.14
	np.arange(0,20,2)				#创建一个3x5的浮点型数组，数组的值是一个线性系列，从0开始，到20结束，步长为2
	np.linsapace(0,1,5)				#创建一个5个元素的数组，这5个数均匀的分配到0~1
	np.random.random(3,3)			#创建一个3x3的，在0～1均匀分配的随机数组成的数组
	np.random.normal(0,1,(3,3))		#创建一个3x3的，均值为0，方差为1,正太分布的随即数数组
	np.random.randint(0,10,(3,3))	#创建一个3x3的，[0,10]区间的随机整形数组
	np.eye(3)						#创建一个3x3的单位矩阵
	np.empty(3)						创建一个由3个整形数组组成的未初始化的数组,数组的值是内存空间中的任意值
	</python,mumpy,initialize,初始化>
	<python,mumpy,shape>
		num = a.shape[0]				#获取数组第一维信息，即行数
		num = a.shape[1]				#获取数组第二维信息，即列数
		nrow,ncol = a.shape[:2]			#获取数组二维信息，即行数和列数
	</python,mumpy,shape>
	<python,reshape,行向量>
		对numpy来说，一维行向量转置输出后还是一维行向量，可通过下面三种方式转置
		a=a.reshape(-1,1)				#
		aT=a[:,None]					#
		a2=np.array(a), print(a2.T)		#先构造二维数组，然后再转置
	</python,reshape,行向量>
	<python,mumpy,dot>
		a = np.array([[1,1],[1,1]])
		b = np.array([[1,0],[0,1]])
		np.dot(a,b)						#？？？
		a*b 							#？？
	</python,mumpy,dot>

		no name python in module tensorflow
		
	</error,tensorflow,python>
	<read file,save file>
		def readFile(path):
			with open(path,'r',errors='ignore') as file:	#filter problem in text with errors
			content = file.read()
			return content

		def saveFile(path,result):
			with open(path,'w',errors='ignore') as file:	#filter problem in text with errors
			content = file.write(result)

		def myPrint(content):
			strTime = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
			print(strTime+"->"+content)
	</read>
	<traverse,遍历文件夹中所有子文件夹和文件>
		def traverse(path):
			dirLst=os.listdir(path)
			for eachFile in dirLst:
			  subDir=os.path.join(path,eachFile)
			  if os.path.isdir(subDir):
			      traverse(subDir)
			  else:
			      partion=os.path.splitext(eachFile)
			      newname=partion[0]+".txt"
			      newname=os.path.join(path,newname)
			      os.rename(subDir,newname)
			      print(eachFile)
	</traverse,遍历文件夹中所有子文件夹和文件>
	<urllib,python>
		urllib提供了一系列用于操作URL的功能
	</urllib,python>
	<input_data,mnist,python>
		#encoding=utf-8
		import input_data
		input_data.read_data_sets("E:\cuiyue\T_MachineLearning/ds/",one_hot=True)
	</input_data,mnist,python>	

</python>
	
<tensorflow>
	<cross entropy>
		序号		事件		概率p	信息量I
		A	电脑正常开机	0.7	-log(p(A))=0.36
		B	电脑无法开机	0.2	-log(p(B))=1.61
		C	电脑爆炸了	0.1	-log(p(C))=2.30
		用熵来定义所有信息量的期望
		H(X) = −∑p(xi)log(p(xi))
	</cross entropy>
	<error,tensorflow>
		警告：Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
		solution:1.在代码中加入如下代码，忽略警告： 
		import os 
		os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
	</error,tensorflow>
	<error,tensorflow>
		NameError: name 'mnist' is not defined
		solution:
		from tensorflow.examples.tutorials.mnist import input_data
		mnist = input_data.read_data_sets('MNIST_data', one_hot=True)
	</error,tensorflow>
</tensorflow>

<neuralnetwork>
	<neuralnetwork, 神经元>
		y = f(sum(wi*xi - theta))		#wi:weight, xi:input, theta:threshold
		y = 1/(1+exp(-x))				#光滑后的神经元模型
	</neuralnetwork,>
	<error BackPropagation,BP algorithm>
		　所谓神经网络的训练或者是学习，其主要目的在于通过学习算法得到神经网络解决指定问题所需的参数，这里的参数包括各层神经元之间的连接权重以及偏置等
	</error>
</neuralnetwork>









